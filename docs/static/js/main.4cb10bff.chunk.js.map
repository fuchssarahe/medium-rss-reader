{"version":3,"sources":["helpers/rssRequest.js","components/Categories/Categories.js","components/Article/Article.js","components/ArticleList/ArticleList.js","components/FeedSelector/FeedSelector.js","helpers/articleHelpers.js","App.js","serviceWorker.js","index.js"],"names":["CORS_PROXY","parser","Parser","rssRequest","url","errorHandler","arguments","length","undefined","error","alert","concat","parseURL","catch","Categories","_ref","_ref$categories","categories","_ref$removable","removable","_ref$onClick","onClick","react_default","a","createElement","className","map","category","key","Title","_ref2","title","href","Metadata","_ref3","creator","date","Snippet","_ref4","text","snippet","suffix","trimmedSnippet","slice","trim","formatSnippet","Article","item","addTagFilter","Article_Title","link","Article_Metadata","pubDate","components_Categories_Categories","contentSnippet","Article_Snippet","FetchingArticlesList","EmptyArticlesList","ArticleList","articles","_ref$isFetching","isFetching","ArticleList_FetchingArticlesList","components_Article_Article","ArticleList_EmptyArticlesList","FeedSelector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","preventDefault","state","feedName","handleChange","setState","target","value","onSubmit","type","name","onChange","Component","filterArticlesByTags","tags","filter","article","matchesTags","forEach","tag","includes","App","Set","_callee","feed","regenerator_default","wrap","_context","prev","next","sent","items","stop","addTag","add","removeTag","delete","components_FeedSelector_FeedSelector","Array","from","components_ArticleList_ArticleList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cb10bff.chunk.js","sourcesContent":["import Parser  from 'rss-parser';\n\n// Medium follows a same-origin policy, so we'll proxy the\n// request to handle headers and get us access to the\n// response body. For simplicity, I'll use an existing\n// service instead of hosting one myself.\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\"\nconst parser = new Parser();\n\n// @param {string} url\n// @callback errorCallback\nfunction rssRequest(url, errorCallback = null) {\n  const errorHandler = errorCallback || function(error) { alert(`There was an error with your request to ${url}`) };\n  return parser.parseURL(CORS_PROXY + url).catch(errorHandler);\n};\n\nexport default rssRequest;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Categories.css';\n\n// Manages HTML and interactions with tags for articles.\nconst Categories = ({ categories = [], removable = false, onClick = () => {} }) => {\n  return (\n    <h4 className='Categories'>\n      {\n        categories.map(category => (\n          <div className='Categories__category' key={category} onClick={() => onClick(category)}>\n            {category}\n            { removable && <span> x</span> }\n          </div>)\n        )\n      }\n    </h4>\n  );\n}\n\nCategories.propTypes = {\n  categories: PropTypes.arrayOf(PropTypes.string),\n  removable: PropTypes.bool,\n  onClick: PropTypes.func\n}\n\nexport default Categories;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Categories from '../Categories/Categories';\nimport './Article.css';\n\n// Responsible for rendering the main content of an article.\nconst Article = ({ item, addTagFilter }) => {\n  return (\n    <li className='Article'>\n      <Title url={item.link} title={item.title} />\n      <Metadata creator={item.creator} date={item.pubDate} />\n      {item.categories && <Categories categories={item.categories} onClick={addTagFilter} />}\n      {item.contentSnippet && <Snippet text={item.contentSnippet} url={item.link} />}\n    </li>\n  );\n}\n\nArticle.propTypes = {\n  item: PropTypes.object.isRequired,\n  addTagFilter: PropTypes.func.isRequired\n}\n\nconst Title = ({ url, title }) => {\n  return (\n    <a href={url}>\n      <h3 className='Article__title'>{title}</h3>\n    </a>\n  );\n};\n\nTitle.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n}\n\nconst Metadata = ({ creator, date }) => {\n  return (\n    <h4 className='Article__metadata'>{creator} | {date}</h4>\n  );\n}\n\nMetadata.propTypes = {\n  creator: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired\n}\n\nconst Snippet = ({ url, text }) => {\n  return (\n    <p className='Article__snippet'>\n      {formatSnippet(text)}\n      <a href={url}>Read More >></a>\n    </p>\n  );\n}\n\nSnippet.propTypes = {\n  url: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired\n}\n\nfunction formatSnippet(snippet) {\n  const trimmedSnippet = snippet.slice(0,-34).trim();\n  let suffix;\n  if (trimmedSnippet[trimmedSnippet.length - 1] === '.') {\n    suffix = ' ';\n  } else {\n    suffix = '... '\n  }\n  return trimmedSnippet + suffix;\n}\n\nexport default Article;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Article from '../Article/Article';\nimport './ArticleList.css';\n\n// Responsible for rendering all articles for a given RSS feed.\n// Also responsible for rendering the empty state and intermediate state\n// while GET requests are in-flight.\nconst ArticleList = ({ articles, isFetching = false, addTagFilter }) => {\n  if (isFetching) return <FetchingArticlesList />;\n  if (!articles || articles.length === 0) return <EmptyArticlesList />;\n\n  return (\n    <ul className='ArticleList'>\n      {\n        articles.map(item => {\n          return <Article item={item} addTagFilter={addTagFilter} key={item.link} />\n        }\n      )}\n    </ul>\n  );\n}\n\nArticleList.propTypes = {\n  articles: PropTypes.arrayOf(PropTypes.object).isRequired,\n  isFetching: PropTypes.bool,\n  addTagFilter: PropTypes.func.isRequired\n}\n\nconst FetchingArticlesList = () => {\n  return (\n    <div className='ArticleList ArticleList--fetching ArticleList--empty'>Fetching articles...</div>\n  )\n}\n\nconst EmptyArticlesList = () => {\n  return (\n    <div className='ArticleList ArticleList--empty'>There are no articles yet! Better find some!</div>\n  )\n}\n\nexport default ArticleList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './FeedSelector.css';\n\n// Responsible for user interactions while determining which feed to show.\nclass FeedSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { feedName: null };\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.handleSubmit(this.state.feedName);\n  }\n\n  handleChange = (event) => {\n    this.setState({ feedName: event.target.value });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className='FeedSelector'>\n        <input type=\"text\" name=\"feed-name\" onChange={this.handleChange} className='FeedSelector__input'/>\n        <button type=\"submit\" className='FeedSelector__button'>View Feed</button>\n      </form>\n    );\n  }\n}\n\nFeedSelector.propTypes = {\n  handleSubmit: PropTypes.func.isRequired\n}\n\nexport default FeedSelector;\n","// @param {Object[]} articles - Output structure of rssRequest\n// @param {string[]} tags\nfunction filterArticlesByTags(articles, tags) {\n  if (!articles) { return []; }\n  if (!tags || tags.length === 0) { return articles; }\n\n  return articles.filter(article => {\n    let matchesTags = true;\n    tags.forEach(tag => {\n      if (!article.categories || !article.categories.includes(tag)) { matchesTags = false; }\n    })\n    return matchesTags;\n  });\n}\n\nexport default filterArticlesByTags;\n","import React, { Component } from 'react';\nimport rssRequest from './helpers/rssRequest';\nimport ArticleList from './components/ArticleList/ArticleList';\nimport FeedSelector from './components/FeedSelector/FeedSelector';\nimport Categories from './components/Categories/Categories';\nimport filterArticlesByTags from './helpers/articleHelpers';\nimport './App.css';\n\n// Responsible for rendering the main content on the page and managing state\n// across which feed to fetch and articles to show.\nclass App extends Component {\n  state = {\n    articles: null,\n    isFetching: false,\n    tags: new Set()\n  };\n\n  handleSubmit = async (feedName) => {\n    this.setState({ isFetching: true })\n\n    const feed = await rssRequest('https://medium.com/feed/' + feedName);\n\n    this.setState({\n      articles: feed.items,\n      isFetching: false\n    });\n  }\n\n  addTag = (tag) => {\n    this.setState({ tags: this.state.tags.add(tag) });\n  }\n\n  removeTag = (tag) => {\n    // I don't love that this state is mutating before being set through\n    // via #setState, but using a Set here keeps logic a little cleaner\n    this.state.tags.delete(tag)\n    this.setState({ tags: this.state.tags });\n  }\n\n  render() {\n    return (\n      <main className=\"App\">\n        <div className=\"App__header\">\n          <h1>Medium RSS Reader</h1>\n          <FeedSelector handleSubmit={this.handleSubmit} />\n        </div>\n        <Categories categories={Array.from(this.state.tags)} onClick={this.removeTag} removable={true} />\n        <ArticleList\n          articles={filterArticlesByTags(this.state.articles, this.state.tags)}\n          isFetching={this.state.isFetching}\n          addTagFilter={this.addTag}\n        />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}